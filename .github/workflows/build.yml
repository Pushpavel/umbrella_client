# This is a basic workflow to help you get started with Actions

name: Build

# Triggers the workflow on push or pull request events
on: [ push, pull_request ]

jobs:
  # Run flutter analyze and test commands
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2

      # Setup Java environment in order to build the Android app.
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      # Setup the flutter environment.
      - name: Setup Flutter
        uses: subosito/flutter-action@v1

      # Get flutter dependencies.
      - name: Get Flutter Dependencies
        run: flutter pub get

      # Statically analyze the Dart code for any errors.
      - name: Run Flutter Analyze
        run: flutter analyze .

      # Run widget tests for our flutter project.
      - name: Run Flutter Test
        run: flutter test

  # Build App Bundle and provide the artifact for the next workflow jobs
  # Requires test job to be passed
  build:
    name: Build Android App Bundle
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2

      # Setup Java environment in order to build the Android app.
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      # Setup the flutter environment.
      - name: Setup Flutter
        uses: subosito/flutter-action@v1

      # Get flutter dependencies.
      - name: Get Flutter Dependencies
        run: flutter pub get

      # Build App Bundle.
      - name: Build Android App Bundle
        run: flutter build appbundle

      # Upload App Bundle to make it available in the next jobs
      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: app-artifact
          path: ./build/app/outputs/bundle/release/app.aab

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: [ test,build ]
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.3.4

      # Remove old release drafts by using the curl request for the releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
            | tr '\r\n' ' ' \
            | jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' \
          curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/{}

      # Get version name and number from pubspec.yaml
      - name: Extract App Version
        id: app_versions
        uses: its404/get-flutter-version@v1.0.0

      # Download app artifact provided by the previous job
      - name: Download Artifact
        id: download-artifact
        uses: actions/download-artifact@v2
        with:
          name: app-artifact

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        id: createDraft
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ steps.download-artifact.outputs.download-path }}/app.aab
          tag: ${{ steps.app_versions.outputs.version_number }}
          # TODO: body: ${{ needs.build.outputs.changelog }}
          commit: ${{ github.ref }}
          draft: true